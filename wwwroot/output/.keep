
### âœ… `README.md`


# ðŸ“„ PDF Compressor API (ASP.NET Core)

This is a simple, lightweight API built using **ASP.NET Core (.NET 9)** that compresses PDF files. 

- ðŸ—‚ Reads PDFs from `wwwroot/input/`
- ðŸ—œ Compresses each PDF
- ðŸ“¤ Stores the compressed PDFs into `wwwroot/output/`
- ðŸŽ¯ Supports both structure-level compression (via iTextSharp) and aggressive compression (via Ghostscript, optional)

---

## ðŸš€ Features

- Simple POST API endpoint to trigger batch compression
- Auto-detects all PDFs in the input folder
- Lightweight setup â€“ no database required
- Static file support for hosting input/output
- Extensible: plug in Ghostscript for better compression

---

## ðŸ“‚ Project Structure

```

PdfCompressorAPI/
â”œâ”€â”€ wwwroot/
â”‚   â”œâ”€â”€ input/          # Place original PDFs here
â”‚   â””â”€â”€ output/         # Compressed PDFs will appear here
â”œâ”€â”€ Controllers/
â”‚   â””â”€â”€ CompressController.cs
â”œâ”€â”€ Services/
â”‚   â”œâ”€â”€ PdfCompressor.cs         # Uses iTextSharp for basic compression
â”‚   â””â”€â”€ GhostscriptCompressor.cs # (Optional) Aggressive compression
â”œâ”€â”€ Program.cs
â””â”€â”€ PdfCompressorAPI.csproj

```

---

## ðŸ›  Installation & Usage

### Step 1: Clone and Install

```bash
git clone https://github.com/your-username/pdf-compressor-api.git
cd pdf-compressor-api
dotnet restore
```

### Step 2: Add Your PDFs

Place all PDFs to be compressed in:

```
wwwroot/input/
```

### Step 3: Run the API

```bash
dotnet run
```

### Step 4: Trigger Compression

Use any HTTP client (Postman, curl, etc.):

```bash
curl -X POST http://localhost:5000/api/compress/compress-all
```

Compressed files will appear in:

```
wwwroot/output/
```

